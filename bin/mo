#!/bin/sh


# TODO:
#   - Improve help texts (search for standards)
#   - Look for better argument parsing (option flags instead?)
#   - possible use of templates?
#   - heist's grep uses pattern. should I add the possibility of
#     multiple words instead?

readonly -a COMMANDS=(stash heist forge peek stamp find)

# ----- HELP

_help() {
  echo
  echo "Modus Operandi"
  echo
  echo "Usage:"
  echo "    `basename $0` stash <verb> <noun>"
  echo "    `basename $0` heist <keywords>"
  echo "    `basename $0` forge <stamp>"
  echo "    `basename $0` peek"
  echo "    `basename $0` stamp"
  echo "    `basename $0` find <stamp>"
  echo
  exit 1
}

_helpStash() {
  echo
  echo "`basename $0` stash"
  echo
  echo "Stash notes in your vault and categorise them by"
  echo "describing your actions."
  echo
  echo "Usage: `basename $0` stash <verb> <noun>"
  echo "Example: `basename $0` stash learning danish"
  echo
  exit 1
}

_helpHeist() {
  echo
  echo "`basename $0` heist"
  echo
  echo "Grep the Vault!"
  echo
  echo "Usage:`basename $0` heist <keywords>"
  echo "Example: `basename $0` heist secret knowledge"
  echo
  exit 1
}

_helpForge() {
  echo
  echo "`basename $0` find"
  echo
  echo "Return the location of document by its timestamp."
  echo
  echo "Usage:`basename $0` find <stamp>"
  echo "Example: `basename $0` find 2128031215"
  echo
  exit 1
}

_helpForge() {
  echo
  echo "`basename $0` forge"
  echo
  echo "Forge an existing document."
  echo
  echo "Usage:`basename $0` forge <stamp>"
  echo "Example: `basename $0` forge 2128031215"
  echo
  exit 1
}

_helpPeek() {
  echo
  echo "`basename $0` peek"
  echo
  echo "List all categories."
  echo
  echo "Usage:`basename $0` peek"
  echo
  exit 1
}

# ----- FUNCS

_rmvBase() {
  sed -e "s|${MOME}/vault/||g"
}

_stamp() {
  date +"%y%W%u%H%M%S"
  # date +"%y%W"
}

_stash() {
  [ $# -lt 2 ] && echo "Too few arguments" && _helpStash
  [ ! -d "$MOME/vault/$1/$2" ] && mkdir -p $MOME/vault/$1/$2
  local timestamp="$(mo stamp)"
  vim $MOME/vault/$1/$2/$timestamp.md
  echo $timestamp
}

_heist() {
  [ -z "$1" ] && echo "Missing keywords." && _helpHeist
  local keywords=""
  for X in "$@"; do
      keywords="${keywords:+${keywords}} -e ${X}"
  done
  grep -C 3 -i --color=always -r $keywords "$MOME/vault" | _rmvBase
}

_find() {
  [ -z "$1" ] && echo "Missing timestamp." && _helpFind
  local givenStamp=$(find $MOME/vault -name "$1*")
  local hits=$(printf "$givenStamp" | wc -w)
  [ $hits -lt 1 ] && echo "Nothing found." && _helpFind
  [ $hits -gt 1 ] && echo "Too many matches." && _helpFind
  echo $givenStamp
}

_forge() {
  vim "$(_find "$1")"
}

_peek() {
  if [ -z "$1" ]; then
    find $MOME/vault -type d | sort |
      awk '$0 !~ last "/" {print last} {last=$0} END {print last}' |
      _rmvBase
    exit
  fi
  _helpPeek
}


_sketch() {
  # ARG: stamp
  # ARG: path to drawing
  # -> save pic with stamp as name in same directory
  echo ""
}

# ----- MAIN

main() {
  [ -z $MOME ] && echo "env variable MOME is not defined" && exit 1
  local CMD=$1
  shift

  # tab completion
  if [ -n "$COMP_LINE" ]; then
    for c in ${COMMANDS[@]}; do
      [ "${c:0:${#1}}" == "$1" ] && echo "${c}"
    done
    exit 0
  fi

  [ -z "${CMD}" ] && _help

  # full command match
  for c in ${COMMANDS[@]}; do
    if [ "${c}" == "${CMD}" ]; then
      "_${c}" "$@"
      exit 0
    fi
  done
}

[ -z "${NORUN}" ] && main "$@"

